#!/system/bin/sh
RED='\033[0;31m'
BLUE='\033[1;34m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BOLD='\033[1m'
RESET='\033[0m'
BOLD_WHITE='\033[1;37m'
LIGHT_YELLOW='\033[1;93m'
brand=$(getprop ro.product.system.brand)
model=$(getprop ro.product.system.model)
INDENT="\n    "

smg_check() {
            if echo "$brand" | grep -iq "samsung"; then
            export IS_SAMSUNG=1
            export brand="$brand"
            export model="$model"
        else
            export IS_SAMSUNG=0
            export brand="$brand"
        fi

        if echo "$IS_SAMSUNG" | grep -iq "1"; then
            printf "\n${LIGHT_YELLOW}[+] Your Device is : ${BOLD_WHITE}${model}${RESET}\n${LIGHT_YELLOW}[i] Starting Samsung Tweaks...${RESET}\n"
            sleep 2
            return 0
        else
            printf "\n${RED}[x] 'Samsung Tweaks' are not supported in a '${brand}' model ðŸ¤¨\n${RESET}"
            sleep 1
            printf "${LIGHT_YELLOW}\n[i] Returning to Start..\n${RESET}"
            return 1
        fi
}

temp_check() {
    while true; do
        # Ottieni la temperatura della batteria
        battery_temp_file="/sys/class/power_supply/battery/temp"
        if [ -f "$battery_temp_file" ]; then
            battery_temp=$(cat "$battery_temp_file")
            battery_temp=$((battery_temp / 10))
        else
            battery_temp="N/A"
        fi

        # Ottieni la temperatura della CPU
        cpu_temp_file="/sys/class/thermal/thermal_zone1/temp"
        if [ -f "$cpu_temp_file" ]; then
            cpu_temp=$(cat "$cpu_temp_file")
            cpu_temp=$((cpu_temp / 1000))
        else
            cpu_temp="N/A"
        fi

        # Ottieni la temperatura della GPU
        gpu_temp_file="/sys/class/thermal/thermal_zone3/temp"
        if [ -f "$gpu_temp_file" ]; then
            gpu_temp=$(cat "$gpu_temp_file")
            gpu_temp=$((gpu_temp / 1000))
        else
            gpu_temp="N/A"
        fi

        # Usa \033[1A per muoversi su una riga e \033[K per pulire la riga
        for i in $(seq 1 $line_count); do
            echo -ne "\033[1A\033[K"
        done

        # Stampa le nuove temperature
        echo -ne "Battery temperature: ${YELLOW}${battery_temp}Â°C${RESET}\n"
        echo -ne "CPU temperature: ${YELLOW}${cpu_temp}Â°C${RESET}\n"
        echo -ne "GPU temperature: ${YELLOW}${gpu_temp}Â°C${RESET}\n"
        echo -ne "\n${GREEN}${BOLD}Press ${RED}CTRL+C${GREEN} to exit temperature monitoring${RESET}\n"
        sleep 2
        clear
    done
}

services=(
"com.google.android.gms/com.google.android.gms.nearby.messages.service.NearbyMessagesService"
"com.google.android.gms/com.google.android.gms.nearby.discovery.service.DiscoveryService"
"com.google.android.gms/.chimera.GmsIntentOperationService"
"com.google.android.gms/com.google.android.gms.nearby.messages.service.NearbyMessagesService"
"com.google.android.gms/com.google.android.gms.nearby.discovery.service.DiscoveryService"
"com.google.android.gms/.chimera.GmsIntentOperationService"
"com.google.android.gms/.kids.KidSetupActivity"
"com.google.android.gms/.kids.LockscreenActivity"
"com.google.android.gms/.kids.LockscreenActivityV2"
"com.google.android.gms/.kids.LockscreenUnlockActivity"
"com.google.android.gms/.kids.ParentAccessActivity"
"com.google.android.gms/.kids.SyncTailTrapperActivity"
"com.google.android.gms/.kids.TransparencyActivity"
"com.google.android.gms/.kids.chimera.RegisterProfileOwnerActivityProxy"
"com.google.android.gms/.kids.settings.KidsSettingsActivity"
"com.google.android.gms/.kids.settings.KidsSettingsActivityAliasSuw"
"com.google.android.gms/.nearby.discovery.devices.DevicesListActivity"
"com.google.android.gms/.nearby.discovery.devices.FindDeviceActivity"
"com.google.android.gms/.nearby.discovery.fastpair.AtvConnectActivity"
"com.google.android.gms/.nearby.discovery.fastpair.CompanionAppInstallActivity"
"com.google.android.gms/.nearby.discovery.fastpair.HalfSheetActivity"
"com.google.android.gms/.nearby.exposurenotification.settings.SettingsActivity"
"com.google.android.gms/.nearby.exposurenotification.settings.SettingsActivityAlias"
"com.google.android.gms/.nearby.exposurenotification.settings.SettingsCheckerActivity"
"com.google.android.gms/.nearby.exposurenotification.settings.SettingsCollapsingToolbarActivity"
"com.google.android.gms/.nearby.messages.settings.NearbyMessagesAppOptInActivity"
"com.google.android.gms/.nearby.setup.ui.WifiConsentActivity"
"com.google.android.gms/.nearby.sharing.ConsentsActivity"
"com.google.android.gms/.nearby.sharing.DeviceVisibilityActivity"
"com.google.android.gms/.nearby.sharing.InternalReceiveSurfaceActivity"
"com.google.android.gms/.nearby.sharing.InternalShareSheetActivity"
"com.google.android.gms/.nearby.sharing.QuickSettingsActivity"
"com.google.android.gms/.nearby.sharing.ReceiveSurfaceActivity"
"com.google.android.gms/.nearby.sharing.SettingsActivity"
"com.google.android.gms/.nearby.sharing.SettingsActivityAlias"
"com.google.android.gms/.nearby.sharing.SettingsCollapsingToolbarActivity"
"com.google.android.gms/.nearby.sharing.SettingsCollapsingToolbarActivityAlias"
"com.google.android.gms/.nearby.sharing.SettingsPreferenceActivity"
"com.google.android.gms/.nearby.sharing.SettingsPreferenceActivityAlias"
"com.google.android.gms/.nearby.sharing.SetupActivity"
"com.google.android.gms/.nearby.sharing.ShareSheetActivity"
"com.google.android.gms/.nearby.sharing.ShareSheetActivityAlias"
"com.google.android.gms/.nearby.sharing.ShareSheetActivityAliasSamsungGallery"
"com.google.android.gms/.nearby.sharing.ShareSheetActivityAliasSamsungMyFiles"
"com.google.android.gms/.fitness.settings.FitnessSettingsActivity"
"com.google.android.gms/.wearable.consent.PrivacySettingsActivity"
"com.google.android.gms/.wearable.consent.TermsOfServiceActivity"
"com.google.android.gms/.wearable.playsetup.ui.AppInstallActivity"
"com.google.android.gms/.wearable.ui.WearableManageSpaceActivity"
"com.google.android.gms/.feedback.FeedbackActivity"
"com.google.android.gms/.feedback.IntentListenerFeedbackActivity"
"com.google.android.gms/.feedback.PreviewActivity"
"com.google.android.gms/.feedback.PreviewScreenshotActivity"
"com.google.android.gms/.feedback.ShowTextActivity"
"com.google.android.gms/.feedback.SuggestionsActivity"
"com.google.android.gms/.googlehelp.contact.chat.ChatConversationActivity"
"com.google.android.gms/.googlehelp.helpactivities.DeviceSignalsExportActivity"
"com.google.android.gms/.googlehelp.helpactivities.ExitActivity"
"com.google.android.gms/.googlehelp.helpactivities.HelpActivity"
"com.google.android.gms/.googlehelp.helpactivities.OpenHelpActivity"
"com.google.android.gms/.googlehelp.helpactivities.OpenHelpRtcActivity"
"com.google.android.gms/.googlehelp.helpactivities.SystemAppTrampolineActivity"
"com.google.android.gms/.googlehelp.webview.GoogleHelpRenderingApiWebViewActivity"
"com.google.android.gms/.googlehelp.webview.GoogleHelpWebViewActivity"
"com.google.android.gms/.ads.settings.AdsSettingsActivity"
"com.google.android.gms/.plus.activity.AccountSignUpActivity"
"com.google.android.gms/.plus.apps.ListAppsActivity"
"com.google.android.gms/.plus.apps.ManageAppActivity"
"com.google.android.gms/.plus.apps.ManageDeviceActivity"
"com.google.android.gms/.plus.apps.ManageMomentActivity"
"com.google.android.gms/.plus.audience.AclSelectionActivity"
"com.google.android.gms/.plus.audience.AudienceSearchActivity"
"com.google.android.gms/.plus.audience.CircleCreationActivity"
"com.google.android.gms/.plus.audience.CircleSelectionActivity"
"com.google.android.gms/.plus.audience.FaclSelectionActivity"
"com.google.android.gms/.plus.audience.UpdateActionOnlyActivity"
"com.google.android.gms/.plus.audience.UpdateCirclesActivity"
"com.google.android.gms/.plus.circles.AddToCircleConsentActivity"
"com.google.android.gms/.plus.oob.PlusActivity"
"com.google.android.gms/.plus.oob.UpgradeAccountActivity"
"com.google.android.gms/.plus.oob.UpgradeAccountInfoActivity"
"com.google.android.gms/.plus.plusone.PlusOneActivity"
"com.google.android.gms/.plus.sharebox.AddToCircleActivity"
"com.google.android.gms/.plus.sharebox.ReplyBoxActivity"
"com.google.android.gms/.plus.sharebox.ShareBoxActivity"
"com.google.android.gms/.plus.ui.DpadNavigableWebViewActivity"
"com.google.android.gms/.games.AddAccountActivity"
"com.google.android.gms/.games.InstallPlayGamesActivity"
"com.google.android.gms/.games.PlayGamesUpgradeActivity"
"com.google.android.gms/.games.ui.ingame.FeatureNotAvailableActivity"
"com.google.android.gms/.games.ui.profile.CreateProfileActivity"
"com.google.android.gms/.games.ui.promotions.InGamePromotionsActivity"
"com.google.android.gms/.games.ui.settings.GamesSettingsActivity"
"com.google.android.gms/.games.ui.settingsv2.GamesSettingsActivity"
"com.google.android.gms/.games.ui.signinflow.SignInActivity"
"com.google.android.gms/.games.ui.upsell.InGameUiProxyActivity"
"com.google.android.gms/.games.ui.upsell.InstallPlayGamesActivity"
"com.google.android.gms/.games.ui.video.ScreenCaptureRequestActivity"
"com.google.android.gms/.cast.activity.CastPopupActivity"
"com.google.android.gms/.findmydevice.spot.deeplinks.DeepLinkActivity"
"com.google.android.gms/.mdm.settings.FindMyDeviceSettingsActivity"
"com.google.android.gms/.mdm.services.MdmPhoneWearableListenerService"
"com.google.android.gms/.usagereporting.settings.UsageReportingActivity"
"com.google.android.gms/.usagereporting.ui.UsageReportingDebugActivity"
"com.google.android.gms/.usagereporting.ui.UsageReportingDialogActivity"
"com.google.android.gms/.pay.deeplink.AliasAddSignUpValuablesDeepLinkActivity"
"com.google.android.gms/.pay.deeplink.AliasSaveValuablesDeepLinkActivity"
"com.google.android.gms/.pay.deeplink.AliasViewValuablesDetailsDeepLinkActivity"
"com.google.android.gms/.pay.deeplink.DeepLinkActivity"
"com.google.android.gms/.pay.main.PayActivity"
"com.google.android.gms/.pay.main.PayOptionalActivity"
"com.google.android.gms/.tapandpay.account.SelectAccountActivity"
"com.google.android.gms/.tapandpay.admin.DeviceAdminPromptActivity"
"com.google.android.gms/.tapandpay.diagnostics.TapDiagnosticsActivity"
"com.google.android.gms/.tapandpay.issuer.RequestDeleteTokenActivity"
"com.google.android.gms/.tapandpay.issuer.RequestSelectTokenActivity"
"com.google.android.gms/.tapandpay.issuer.RequestTokenizeActivity"
"com.google.android.gms/.tapandpay.keyguard.KeyguardSecurityInfoActivity"
"com.google.android.gms/.tapandpay.settings.NotificationSettingsActivity"
"com.google.android.gms/.tapandpay.settings.SelectOtherPaymentMethodActivity"
"com.google.android.gms/.tapandpay.settings.SelectUntokenizedCardActivity"
"com.google.android.gms/.tapandpay.settings.TapAndPaySettingsActivity"
"com.google.android.gms/.tapandpay.tap.TapKeyguardActivity"
"com.google.android.gms/.tapandpay.tap.TapUiActivity"
"com.google.android.gms/.tapandpay.tokenization.AcceptGooglePayTosActivity"
"com.google.android.gms/.tapandpay.tokenization.AcceptTosActivity"
"com.google.android.gms/.tapandpay.tokenization.AddNewCardForTokenizationActivity"
"com.google.android.gms/.tapandpay.tokenization.AddNewCardThroughBrowserActivity"
"com.google.android.gms/.tapandpay.tokenization.EnableNfcActivity"
"com.google.android.gms/.tapandpay.tokenization.EnterVerificationCodeActivity"
"com.google.android.gms/.tapandpay.tokenization.NameResolutionActivity"
"com.google.android.gms/.tapandpay.tokenization.SelectVerificationMethodActivity"
"com.google.android.gms/.tapandpay.tokenization.SummaryActivity"
"com.google.android.gms/.tapandpay.tokenization.TokenizePanActivity"
"com.google.android.gms/.tapandpay.tokenization.UnsupportedCardActivity"
"com.google.android.gms/.tapandpay.transaction.WalletTransactionDetailsActivity"
"com.google.android.gms/.tapandpay.ui.EnableSecureKeyguardActivity"
"com.google.android.gms/.tapandpay.ui.PromptSetupActivity"
"com.google.android.gms/.tapandpay.ui.SecureDeviceActivity"
"com.google.android.gms/.tapandpay.ui.ShowSecurityPromptActivity"
"com.google.android.gms/.tapandpay.ui.TokenizationSuccessActivity"
"com.google.android.gms/.tapandpay.ui.WarmWelcomeActivity"
"com.google.android.gms/.tapandpay.wear.WearProxyActivity"
"com.google.android.gms/.tapandpay.wear.WearProxyCompanionActivity"
"com.google.android.gms/.tapandpay.wear.dialog.WearSecureKeyguardDialogActivity"
"com.google.android.gms/.tapandpay.wear.dialog.WearTapAndPayDialogActivity"
"com.google.android.gms/.wallet.activity.GenericDelegatorActivity"
"com.google.android.gms/.wallet.activity.OrchestrationDelegatorActivity"
"com.google.android.gms/.wallet.bender3.Bender3FinishRedirectProxyActivity"
"com.google.android.gms/.wallet.common.ui.UpdateCallingAppActivity"
"com.google.android.gms/.wallet.ib.IbPaymentRequestCompatActivity"
"com.google.android.gms/.wallet.idcredit.IdCreditActivity"
"com.google.android.gms/.wallet.im.ImRootActivity"
"com.google.android.gms/.wallet.ow.ChooseAccountShimActivity"
"com.google.android.gms/.wallet.ow.ChooseAccountShimInternalActivity"
"com.google.android.gms/.wallet.paymentmethods.PaymentMethodsActivity"
"com.google.android.gms/.wallet.pm.pmRootActivity"
"com.google.android.gms/.wallet.redirect.FinishAndroidAppRedirectProxyActivity"
"com.google.android.gms/.wallet.selector.InitializeGenericSelectorRootActivity"
"com.google.android.gms/.wallet.setupwizard.PaymentsSetupWizardActivity"
"com.google.android.gms/.wallet.setupwizard.PaymentsSetupWizardMainActivity"
"com.google.android.gms/.wallet.setupwizard.PaymentsSetupWizardPortalActivity"
"com.google.android.gms/.wallet.setupwizard.PaymentsSetupWizardReactivationActivity"
"com.google.android.gms/.wallet.setupwizard.PaymentsSetupWizardTokenEligibleActivity"
"com.google.android.gms/.wallet.timelineview.TimeLineViewActivity"
"com.google.android.gms/.walletp2p.feature.completion.CompleteMoneyTransferActivity"
"com.google.android.gms/.walletp2p.feature.transfer.TransferMoneyActivity"
# Providers
"com.google.android.gms/.nearby.discovery.fastpair.slice.FastPairContextualCardProvider"
"com.google.android.gms/.nearby.discovery.fastpair.slice.FastPairSliceProvider"
"com.google.android.gms/.nearby.sharing.SharingSliceProvider"
"com.google.android.gms/.fitness.sync.FitnessContentProvider"
"com.google.android.gms/.ads.adinfo.AdvertisingInfoContentProvider"
"com.google.android.gms/.games.chimera.GamesContentProviderProxy"
"com.google.android.gms/.games.provider.NotificationStubContentProvider"
"com.google.android.gms/.plus.provider.PlusProvider"
"com.google.android.gms/.phenotype.provider.ConfigurationProvider"
"com.google.android.gms/.wallet.setupwizard.PaymentsSetupWizardSuggestionStateProvider"
# Receivers
"com.google.android.gms/.kids.account.receiver.ProfileOwnerReceiver"
"com.google.android.gms/.nearby.discovery.fastpair.slice.FastPairContextualCardProvider"
"com.google.android.gms/.googlehelp.GcmBroadcastReceiver"
"com.google.android.gms/.ads.config.FlagsReceiver"
"com.google.android.gms/.analytics.AnalyticsReceiver"
"com.google.android.gms/.games.chimera.GamesSystemBroadcastReceiverProxy"
"com.google.android.gms/.games.chimera.InternalIntentReceiverProxy"
"com.google.android.gms/.phenotype.service.FlagOverrideReceiver"
"com.google.android.gms/com.google.android.libraries.phenotype.client.stable.AccountRemovedBroadcastReceiver"
"com.google.android.gms/.pay.notifications.GcmBroadcastReceiver"
"com.google.android.gms/.tapandpay.admin.TpDeviceAdminReceiver"
"com.google.android.gms/.tapandpay.notifications.GcmBroadcastReceiver"
"com.google.android.gms/.stats.service.DropBoxEntryAddedReceiver"
# Services
"com.google.android.gms/.kids.GcmReceiverService"
"com.google.android.gms/.kids.JobService"
"com.google.android.gms/.kids.SecondaryLockscreenService"
"com.google.android.gms/.kids.SupervisionService"
"com.google.android.gms/.kids.chimera.KidsServiceProxy"
"com.google.android.gms/.nearby.bootstrap.service.NearbyBootstrapService"
"com.google.android.gms/.nearby.connection.service.NearbyConnectionsAndroidService"
"com.google.android.gms/.nearby.discovery.service.DiscoveryService"
"com.google.android.gms/.nearby.exposurenotification.WakeUpService"
"com.google.android.gms/.nearby.exposurenotification.service.ExposureMatchingService"
"com.google.android.gms/.nearby.exposurenotification.service.ExposureMatchingTriggerService"
"com.google.android.gms/.nearby.exposurenotification.service.ExposureNotificationInternalService"
"com.google.android.gms/.nearby.fastpair.service.WearableDataListenerService"
"com.google.android.gms/.nearby.mediums.nearfieldcommunication.NfcAdvertisingService"
"com.google.android.gms/.nearby.messages.debug.DebugPokeService"
"com.google.android.gms/.nearby.messages.offline.OfflineCachingService"
"com.google.android.gms/.nearby.messages.service.NearbyMessagesService"
"com.google.android.gms/.nearby.sharing.DirectShareService"
"com.google.android.gms/.nearby.sharing.ReceiveSurfaceService"
"com.google.android.gms/.nearby.sharing.SharingSyncService"
"com.google.android.gms/.nearby.sharing.SharingTileService"
"com.google.android.gms/.chimera.CarBoundBrokerService"
"com.google.android.gms/.chimera.CastPersistentBoundBrokerService"
"com.google.android.gms/.fitness.cache.DataUpdateListenerCacheService"
"com.google.android.gms/.fitness.sensors.sample.CollectSensorService"
"com.google.android.gms/.fitness.service.ble.FitBleBroker"
"com.google.android.gms/.fitness.service.config.FitConfigBroker"
"com.google.android.gms/.fitness.service.goals.FitGoalsBroker"
"com.google.android.gms/.fitness.service.history.FitHistoryBroker"
"com.google.android.gms/.fitness.service.internal.FitInternalBroker"
"com.google.android.gms/.fitness.service.proxy.FitProxyBroker"
"com.google.android.gms/.fitness.service.recording.FitRecordingBroker"
"com.google.android.gms/.fitness.service.sensors.FitSensorsBroker"
"com.google.android.gms/.fitness.service.sessions.FitSessionsBroker"
"com.google.android.gms/.fitness.service.wearable.WearableSyncAccountService"
"com.google.android.gms/.fitness.service.wearable.WearableSyncConfigService"
"com.google.android.gms/.fitness.service.wearable.WearableSyncConnectionService"
"com.google.android.gms/.fitness.service.wearable.WearableSyncMessageService"
"com.google.android.gms/.fitness.sync.FitnessSyncAdapterService"
"com.google.android.gms/.fitness.sync.SyncGcmTaskService"
"com.google.android.gms/.fitness.wearables.WearableSyncService"
"com.google.android.gms/.wearable.service.WearableService"
"com.google.android.gms/.feedback.FeedbackAsyncService"
"com.google.android.gms/.feedback.LegacyBugReportService"
"com.google.android.gms/.feedback.OfflineReportSendTaskService"
"com.google.android.gms/.googlehelp.contact.chat.ChatRequestAndConversationService"
"com.google.android.gms/.googlehelp.gcm.InvalidateGcmTokenGcmTaskService"
"com.google.android.gms/.googlehelp.metrics.ReportBatchedMetricsGcmTaskService"
"com.google.android.gms/.googlehelp.service.GoogleHelpService"
"com.google.android.gms/.ads.AdRequestBrokerService"
"com.google.android.gms/.ads.GservicesValueBrokerService"
"com.google.android.gms/.ads.cache.CacheBrokerService"
"com.google.android.gms/.ads.identifier.service.AdvertisingIdNotificationService"
"com.google.android.gms/.ads.identifier.service.AdvertisingIdService"
"com.google.android.gms/.ads.jams.NegotiationService"
"com.google.android.gms/.ads.measurement.GmpConversionTrackingBrokerService"
"com.google.android.gms/.ads.social.GcmSchedulerWakeupService"
"com.google.android.gms/.analytics.AnalyticsService"
"com.google.android.gms/.analytics.AnalyticsTaskService"
"com.google.android.gms/.analytics.internal.PlayLogReportingService"
"com.google.android.gms/.analytics.service.AnalyticsService"
"com.google.android.gms/.plus.service.DefaultIntentService"
"com.google.android.gms/.plus.service.ImageIntentService"
"com.google.android.gms/.plus.service.OfflineActionSyncAdapterService"
"com.google.android.gms/.plus.service.PlusService"
"com.google.android.gms/.games.chimera.GamesAndroidServiceProxy"
"com.google.android.gms/.games.chimera.GamesAsyncServiceProxy"
"com.google.android.gms/.games.chimera.GamesSignInIntentServiceProxy"
"com.google.android.gms/.games.chimera.GamesSignInServiceProxy"
"com.google.android.gms/.games.chimera.GamesSyncServiceMainProxy"
"com.google.android.gms/.games.chimera.GamesSyncServiceNotificationProxy"
"com.google.android.gms/.games.chimera.GamesUploadServiceProxy"
"com.google.android.gms/.games.chimera.RoomAndroidServiceProxy"
"com.google.android.gms/.games.chimera.SnapshotEventServiceProxy"
"com.google.android.gms/.photos.autobackup.service.AutoBackupService"
"com.google.android.gms/.measurement.service.MeasurementBrokerService"
"com.google.android.gms/.cast.media.CastMediaRoute2ProviderService"
"com.google.android.gms/.cast.media.CastMediaRoute2ProviderService_Isolated"
"com.google.android.gms/.cast.media.CastMediaRoute2ProviderService_Persistent"
"com.google.android.gms/.cast.media.CastMediaRouteProviderService"
"com.google.android.gms/.cast.media.CastMediaRouteProviderService_Isolated"
"com.google.android.gms/.cast.media.CastMediaRouteProviderService_Persistent"
"com.google.android.gms/.cast.media.CastRemoteDisplayProviderService"
"com.google.android.gms/.cast.media.CastRemoteDisplayProviderService_Isolated"
"com.google.android.gms/.cast.media.CastRemoteDisplayProviderService_Persistent"
"com.google.android.gms/.cast.service.CastPersistentService"
"com.google.android.gms/.cast.service.CastPersistentService_Isolated"
"com.google.android.gms/.cast.service.CastPersistentService_Persistent"
"com.google.android.gms/.cast.service.CastSocketMultiplexerLifeCycleService"
"com.google.android.gms/.cast.service.CastSocketMultiplexerLifeCycleService_Isolated"
"com.google.android.gms/.cast.service.CastSocketMultiplexerLifeCycleService_Persistent"
"com.google.android.gms/.chimera.GmsIntentOperationService ## bug log flood"
"com.google.android.gms/.common.config.PhenotypeCheckinService"
"com.google.android.gms/.phenotype.gcm.GcmReceiverService"
"com.google.android.gms/.phenotype.service.sync.PackageUpdateTaskService"
"com.google.android.gms/.phenotype.service.sync.PhenotypeConfigurator"
"com.google.android.gms/com.google.android.libraries.phenotype.registration.PhenotypeMetadataHolderService"
"com.google.android.gms/.usagereporting.service.UsageReportingIntentService"
"com.google.android.gms/.pay.gcmtask.PayGcmTaskService"
"com.google.android.gms/.pay.hce.service.PayHceService"
"com.google.android.gms/.pay.notifications.PayNotificationService"
"com.google.android.gms/.pay.security.storagekey.service.StorageKeyCacheService"
"com.google.android.gms/.tapandpay.gcmtask.TapAndPayGcmTaskService"
"com.google.android.gms/.tapandpay.globalactions.QuickAccessWalletService"
"com.google.android.gms/.tapandpay.hce.service.TpHceService"
"com.google.android.gms/.tapandpay.security.StorageKeyCacheService"
"com.google.android.gms/.tapandpay.tokenization.TokenizePanService"
"com.google.android.gms/.tapandpay.wear.WearProxyService"
"com.google.android.gms/.wallet.service.PaymentService"
"com.google.android.gms/.wallet.service.WalletGcmTaskService"
"com.google.android.gms/.wallet.service.address.AddressService"
"com.google.android.gms/.backup.stats.BackupStatsService"
"com.google.android.gms/.common.stats.StatsUploadService"
"com.google.android.gms/.common.stats.net.NetworkReportService"
"com.google.android.gms/.stats.PlatformStatsCollectorService"
"com.google.android.gms/.stats.service.DropBoxEntryAddedService"
"com.google.android.gms/.chimera.GmsIntentOperationService"
)
help_menu() {
    printf "\n${BOLD}infamick - System Utility Script${RESET}"
    echo
    printf "\n${GREEN}Usage:${RESET} infamick ${BOLD}<command> ${BLUE}${BOLD}<2ndcommand>${RESET}"
    echo
    printf "\n${YELLOW}Available commands:${RESET}"
    printf "\n  ${BOLD}battery${RESET} - Display battery health and charging cycles"
    printf "\n            Shows the current battery health percentage and"
    printf "\n            the number of charging cycles"
    echo
    printf "\n  ${BOLD}boosta${RESET}  - Boost all apps"
    printf "\n  ${BOLD}boostb${RESET}  - Improves battery draining"
    printf "\n            Run only while charging at 100%"
    echo
    printf "\n  ${BOLD}boot${RESET}    - Reset boot count settings"
    printf "\n            Sets global boot_count and Phenotype_boot_count to 0"
    echo
    printf "\n  ${BOLD}cache${RESET}   - Trim cache multiple times"
    echo
    printf "\n  ${BOLD}gmsd${RESET}    - Disables GMS services"
    printf "\n  ${BOLD}gmse${RESET}    - Enables GMS services"
    echo
    printf "\n  ${BOLD}info${RESET}    - Display this help message"
    printf "\n  ${BOLD}--help${RESET}  - Alias for info"
    printf "\n  ${BOLD}-h${RESET}      - Alias for info"
    echo
    printf "\n  ${BOLD}smg${RESET} ${BLUE}${BOLD}<2ndcommand>${RESET}  ${YELLOW}${BOLD}Samsung Tweaks${RESET}" 
    echo
    printf "\n  ${BOLD}smg${RESET} ${BLUE}${BOLD}csc${RESET}   - Change current CSC"
    echo
    printf "\n  ${BOLD}smg${RESET} ${BLUE}${BOLD}dex_d${RESET} - Disable knox packages"
    echo
    printf "\n  ${BOLD}smg${RESET} ${BLUE}${BOLD}dex_e${RESET} - Dnable knox packages"
    echo
    printf "\n  ${BOLD}smg${RESET} ${BLUE}${BOLD}exdim${RESET} - Open hidden Extra Dim menu"
    echo
    printf "\n  ${BOLD}smg${RESET} ${BLUE}${BOLD}gest${RESET}  - Open hidden Gestures menu"
    echo
    printf "\n  ${BOLD}smg${RESET} ${BLUE}${BOLD}ntw_b${RESET} - Open 5G Network Bands guide"
    echo
    printf "\n  ${BOLD}smg${RESET} ${BLUE}${BOLD}ntw_l${RESET} - Open Network Bands settings"
    echo
    printf "\n  ${BOLD}sot${RESET}     - Calculate how SOT is possible with 100% battery"
    printf "\n               Requires:"
    printf "\n                  - Current SOT minutes value"
    printf "\n                  - Discharged percentage value"
    echo
    printf "\n  ${BOLD}temp${RESET}    - Monitor system temperatures"
    printf "\n            Displays real-time temperatures for Battery, CPU, and GPU"
    printf "\n            Press CTRL+C to exit temperature monitoring"
    echo
    printf "\n${GREEN}Examples:${RESET}"
    printf "\n  infamick boot"
    printf "\n  infamick gmsd"
    printf "\n  infamick exdim"
    printf "\n  infamick ntw_l"
    echo
    printf "\n${YELLOW}Note:${RESET} This script requires root access to function properly."
}

boot() {
    settings put global boot_count 0
    settings put global Phenotype_boot_count 0
    printf "${INDENT}${GREEN}[i]Boot count resetted successfully.${RESET}"
}

boost_app() {
    printf "${INDENT}${YELLOW}[i]Boosting apps${RESET}"
    cmd package compile -m speed-profile -a
    printf "${INDENT}${GREEN}[i]Done${RESET}"
}

boost_battery() {
    printf "${INDENT}${YELLOW}[i]Boosting battery${RESET}"
    cmd package bg-dexopt-job
    printf "${INDENT}${GREEN}[i]Done${RESET}"
}

battinfo() {

    battery_info=$(/system/bin/dumpsys battery)
    health=$(echo "$battery_info" | sed -n 's/.*mSavedBatteryAsoc: \([^,]*\).*/\1/p')
    cycles_raw=$(echo "$battery_info" | sed -n 's/.*mSavedBatteryUsage: \([^,]*\).*/\1/p')

    # Dividi il valore di mSavedBatteryUsage per 100
    cycles=$((cycles_raw / 100))
    printf "${INDENT}${GREEN}[i] Your Battery health is ${RED}${BOLD}$health${RESET}"
    printf "${INDENT}${GREEN}[i] Your battery charging cycles are ${RED}${BOLD}$cycles${RESET}\n"
    exit 0
}

gms_disable() {
    printf "${INDENT}${YELLOW}[i]Disabling GMS${RESET}"
    sleep 2
    for service in "${services[@]}"; do
        pm disable "$service"
    done
    printf "${INDENT}${GREEN}[i]]GMS disable process completed.${RESET}\n"
}

gms_enable() {
    printf "${INDENT}${YELLOW}[i]Enabling GMS"
    sleep 2
    for service in "${services[@]}"; do
        pm enable "$service"
    done
    printf "${INDENT}${GREEN}[i]]GMS enable process completed.${RESET}\n"
}

sot_calculator() {
printf "${INDENT}${BOLD}Enter minutes of your current SOT:"
read minutes
printf "${INDENT}${BOLD}Enter the discharged percentage:"
read percentage

# Calculate estimated SOT in hours
result=$(awk "BEGIN {printf \"%.2f\", ($minutes * 100) / ($percentage * 60)}")

# Convert result to integer hours and minutes
hours=$(echo $result | cut -d'.' -f1)
decimal_part=$(echo $result | cut -d'.' -f2)
minutes=$(awk "BEGIN {printf \"%.0f\", ($decimal_part * 60) / 100}")

# Calculate harshrate
harshrate=$(awk "BEGIN {printf \"%.2f\", 100 / $result}")


printf "${INDENT}${BOLD}Estimated SOT with 100% battery: ${YELLOW}${BOLD}${hours}h and ${minutes}m${RESET}"
printf "${INDENT}${BOLD}Harshrate: ${YELLOW}${BOLD}${harshrate}%/hr${RESET}"
}

clear_cache() {
    num_iterations=44
    error_occurred=false
    echo "\nClearing cache"
    for i in $(seq 1 $num_iterations); do
        pm trim-caches 999999999999999999
        
        # Check if the command was successful
        if [ $? -ne 0 ]; then
            # An error occurred while executing the command
            printf "${INDENT}${RED}Error: Command pm trim-caches failed.${RESET}"
            error_occurred=true
            break
        fi
        
        if [ $i -eq 22 ]; then
            printf "${INDENT}    ${YELLOW}Please wait ...${RESET}"
        fi
        
        # Progress counter
        progress=$((100 * i / num_iterations))
        # Print the progress counter
        echo -n -e "\r    ${GREEN}["
        for j in $(seq 1 $((progress / 2))); do
            echo -n "="
        done
        printf ">%02d%%]${RESET}" $progress
    done
    
    if [ "$error_occurred" = false ]; then
        sleep 2
        clear
        echo "\nDone"
    fi
}
smg_ntw() {
    printf "${INDENT}${YELLOW}[i] This will redirect you to the 'Service mode' menu.${RESET}\n" ; sleep 1
    sleep 1
    printf "${INDENT}${YELLOW}[i] Refer to the guide below for better understanding,\n   then come back again.${RESET}\n" ; sleep 2
    nohup am start -a android.intent.action.VIEW -d https://t.me/SamsungTweaks/221 >/dev/null 2>&1 &
    printf "${INDENT}${YELLOW}[i] Press ENTER when you are ready${RESET}"
    read -r a
    am broadcast -a com.samsung.android.action.SECRET_CODE -d android_secret_code://27663368378 -n com.sec.android.RilServiceModeApp/.SecKeyStringBroadcastReceiver > /dev/null 2>&1
    printf "${INDENT}${BOLD_GREEN}\n[+] Execution Succeed..! \n${RESET}"
}
smg_band() {
    printf "${INDENT}${YELLOW}[i] This will redirect you to the 'Service mode' menu.${RESET}\n" ; sleep 1
    sleep 1
    printf "${INDENT}${YELLOW}[i] Press ENTER when you are ready${RESET}"
    read -r a
    am start com.samsung.android.app.telephonyui/.hiddennetworksetting.MainActivity > /dev/null 2>&1
    printf "${INDENT}${BOLD_GREEN}\n[+] Execution Succeed..! \n${RESET}"
}

extradim() {
    printf "${INDENT}${YELLOW}[i] This will redirect you to the 'Extra Dim' menu.${RESET}\n" ; sleep 1
    printf "${INDENT}${YELLOW}[i] Press ENTER when you are ready${RESET}"
    read -r a  
    am force-stop com.android.settings > /dev/null 2>&1
    am start -n com.android.settings/.Settings\$ReduceBrightColorsSettingsActivity > /dev/null 2>&1
    printf "${INDENT}${BOLD_GREEN}\n[+] Execution Succeed..! \n${RESET}"
}
gestures() {
    printf "${INDENT}${YELLOW}[i] This will redirect you to the 'Gesture Settigns' menu.${RESET}\n" ; sleep 1
    printf "${INDENT}${YELLOW}[i] Press ENTER when you are ready${RESET}"
    read -r a  
    am force-stop com.android.settings > /dev/null 2>&1
    am start -n com.android.settings/.Settings\$GestureNavigationSettingsActivity > /dev/null 2>&1
    printf "${INDENT}${BOLD_GREEN}\n[+] Execution Succeed..! \n${RESET}"
}
# Example usage:
# infamick_sot 30 50

disable_package() {
    package_name="$1"
    if pm disable-user --user 0 "$package_name" > /dev/null 2>&1; then
        printf "${INDENT}${BOLD}${GREEN}[+] Successfully disabled: ${package_name}${RESET}\n"
    else
        printf "${INDENT}${BOLD}${RED}[-] Failed to disable: ${package_name}${RESET}\n"
    fi
}


enable_package() {
    package_name="$1"
    if pm enable "$package_name" > /dev/null 2>&1; then
        printf "${INDENT}${BOLD}${GREEN}[+] Successfully enabled: ${package_name}${RESET}\n"
    else
        printf "${INDENT}${BOLD}${RED}[-] Failed to enable: ${package_name}${RESET}\n"
    fi
}

deknox_disable() {
    knox_packages=(
        "com.samsung.android.knox.analytics.uploader"
        "com.samsung.android.bbc.bbcagent"
        "com.knox.vpn.proxyhandler"
        "com.samsung.android.knox.containercore"
        "com.samsung.knox.keychain"
        "com.sec.enterprise.knox.attestation"
        "com.sec.enterprise.knox.cloudmdm.smdms"
        "com.samsung.android.knox.kpecore"
        "com.samsung.android.knox.pushmanager"
        "com.samsung.knox.securefolder"
    )

    printf "${INDENT}${YELLOW}[i] Starting Knox disable process...${RESET}\n"

    for package in "${knox_packages[@]}"; do
        disable_package "$package"
    done

    printf "${INDENT}${YELLOW}[i] Knox disable process completed.${RESET}\n"
}

deknox_enable() {
    knox_packages=(
        "com.samsung.android.knox.analytics.uploader"
        "com.samsung.android.bbc.bbcagent"
        "com.knox.vpn.proxyhandler"
        "com.samsung.android.knox.containercore"
        "com.samsung.knox.keychain"
        "com.sec.enterprise.knox.attestation"
        "com.sec.enterprise.knox.cloudmdm.smdms"
        "com.samsung.android.knox.kpecore"
        "com.samsung.android.knox.pushmanager"
        "com.samsung.knox.securefolder"
    )

    printf "${INDENT}${YELLOW}[i] Starting Knox enable process...${RESET}\n"

    for package in "${knox_packages[@]}"; do
        enable_package "$package"
    done

    printf "${INDENT}${YELLOW}[i] Knox enable process completed.${RESET}\n"
}
change_csc() {
    printf "${INDENT}${YELLOW}[i] Always check /optics or /product to ensure the required CSC\n   folder is available.${RESET}\n"
    printf "${INDENT}${YELLOW}[i] If you choose the wrong CSC code, the entire CSC features\n   will break.${RESET}\n"
    printf "${INDENT}${RED}[i] DO AT YOUR OWN RISK..!${RESET}\n"
    printf "${INDENT}${YELLOW}[i] Press ENTER when you are ready${RESET}"
    read -r a  
    current_csc=$(cat /efs/imei/mps_code.dat)
    printf "${INDENT}${YELLOW}[*] Your Current CSC : ${BOLD_WHITE}%s${RESET}\n" "$current_csc"
    if [ -z "$csc_code" ] || [[ "$csc_code" == *" "* ]]; then
        printf "${INDENT}${RED}[!] Error: Invalid CSC code. Please enter a valid code.${RESET}\n\n"
        exit 1
        return
        fi

            # Check for simple letters in CSC code
    if [[ "$csc_code" != *[!\ ]* ]]; then
        printf "${INDENT}${RED}[!] Error: CSC code should contain at least one non-space character.${RESET}\n\n"
        exit 1
        return
    fi

    # Update the CSC code
    printf "${INDENT}"

    # To printf "\n%.0s" {1..100} ; clear the current values
    > /efs/imei/mps_code.dat ; > /efs/imei/omcnw_code.dat
    echo "$csc_code" > /efs/imei/mps_code.dat ; echo "$csc_code" > /efs/imei/omcnw_code.dat
    printf "${INDENT}${GREEN}[+] CSC has been updated to: ${BOLD_WHITE}%s${RESET}\n\n" "$csc_code"
    printf "${INDENT}${YELLOW}[i] Execution Succeed..! ${RESET}\n"
}

battsettings() {
    printf "${INDENT}${YELLOW}[i] This will redirect you to the 'Extra Dim' menu.${RESET}\n" ; sleep 1
    printf "${INDENT}${YELLOW}[i] Press ENTER when you are ready${RESET}"
    read -r a  
    am force-stop com.android.settings > /dev/null 2>&1
    am start -n com.android.settings/.Settings\$HighPowerApplicationsActivity > /dev/null 2>&1
    printf "${INDENT}${BOLD_GREEN}\n[+] Execution Succeed..! \n${RESET}"
}
display_reset() {
    printf "${INDENT}${YELLOW}[i] This will reset your dislay settings.${RESET}\n" ; sleep 1
    printf "${INDENT}${YELLOW}[i] Press ENTER when you are ready${RESET}"
    read -r a  
    wm size reset
    wm density reset
    printf "${INDENT}${BOLD_GREEN}\n[+] Execution Succeed..! \n${RESET}"
}
see_display() {
    wm_size_physycal=$(wm size | awk '/Physical size:/ {print $3}')
    wm_size_override=$(wm size | awk '/Override size:/ {print $3}')
    dpi=$(wm density | awk '{print $3}')
    printf "${INDENT}${GREEN} [i]Your screen resolution is\n"
    printf "${INDENT}${BLUE}${BOLD}Physical size: $wm_size_physycal${RESET}\n"
    printf "${INDENT}${BLUE}${BOLD}Override size: $wm_size_override${RESET}\n"
    printf "${INDENT}${BLUE}${BOLD}Dpi: $dpi${RESET}\n"
}
set_display() {
    printf "${INDENT}${YELLOW}[i] Choose Screen resolution ${BLUE}${BOLD}width${WHITE} x ${BLUE}height${RESET}\n    "
    read -r screenres
    printf "${INDENT}${BLUE}${BOLD}[!] You choosed ${RED}${BOLD}$screenres${RESET}"
    confirm_and_execute || return
    printf "${INDENT}${YELLOW}[i] Choose Dpi${RESET}\n"
    read -r dpisize
    printf "${INDENT}${BLUE}${BOLD} [!]You choosed ${RED}${BOLD}$dpisize${RESET}"
    confirm_and_execute || return
    printf "${INDENT}${YELLOW}[i] Press ENTER to apply new Screen Resolution${RESET}"
    wm size $screenres
    wm density $dpisize
}
case "$1" in
    batt_b)
        boost_battery
        ;;
    batt_i)
        battinfo
        ;;
    batt_s)
        battsettings
        ;;
    boot)
        boot
        ;;
    cache)
        clear_cache
        ;;
    dsp)
        if [ -z "$2" ]; then
            printf "${INDENT}${RED}Error: Need second argument '$1' '$2'${RESET}"
            printf "${INDENT}Use '${BOLD}infamick info${RESET}' for usage information."
            exit 1
        fi
        case "$2" in
            calc)
                ;;
            reset)
                display_reset
                ;;
            set)
                set_display
                ;;
            show)
                see_display
                ;;
            *)
                printf "${INDENT}${RED}Error: Unknown command '$1' '$2'${RESET}"
                printf "${INDENT}Use '${BOLD}infamick info${RESET}' for usage information."
                exit 1
                ;;
            esac
            ;;
    gmsd)
        gms_disable
        ;;
    gmse)
        gms_enable
        ;;
    perf)
        boost_app
        ;;
    smg)
        if [ -z "$2" ]; then
            printf "${INDENT}${RED}Error: Need second argument '$1' '$2'${RESET}"
            printf "${INDENT}Use '${BOLD}infamick info${RESET}' for usage information."
            exit 1
        fi
        case "$2" in
            csc)
                smg_check || return 
                change_csc
                ;;
            dex_d)
                smg_check || return 
                deknox_disable
                ;;
            dex_e)
                smg_check || return 
                deknox_enable
                ;;
            exdim)
                smg_check || return 
                extradim
                ;;
            gest)
                smg_check || return 
                gestures
                ;;
            ntw_b)
                smg_check || return 
                smg_ntw
                ;;
            ntw_l)
                smg_check || return 
                smg_band
                ;;
            *)
                printf "${INDENT}${RED}Error: Unknown command '$1' '$2'${RESET}"
                printf "${INDENT}Use '${BOLD}infamick info${RESET}' for usage information."
                exit 1
                ;;
            esac
        ;;
    sot)
        sot_calculator
        ;;
    temp)
        temp_check
        ;;
    info|--help|-h)
        help_menu
        ;;
    *)
        printf "${INDENT}${RED}Error: Unknown command '$1'${RESET}"
        printf "${INDENT}Use '${BOLD}infamick info${RESET}' for usage information."
        exit 1
        ;;
esac
